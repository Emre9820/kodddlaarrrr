import os
import numpy as np
import pandas as pd
import joblib
from collections import defaultdict

from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import ExtraTreesClassifier
from sklearn.metrics import accuracy_score, classification_report
from sklearn.model_selection import train_test_split

# Reproducibility için seed ayarı
np.random.seed(42)

###############################################
# SNV Uygulama Fonksiyonu
###############################################
def snv(data):
    """
    Standard Normal Variate (SNV) dönüşümü uygular.
    """
    data = np.array(data)
    mean = np.mean(data, axis=1, keepdims=True)
    std = np.std(data, axis=1, keepdims=True)
    snv_data = np.where(std == 0, 0, (data - mean) / std)
    return snv_data

###############################################
# Veri Yükleme Fonksiyonu (Sadece _r.csv)
###############################################
def load_data(data_dir, mode='train'):
    """
    Verileri yükler ve özellik çıkarımı yapar (sadece _r.csv).
    """
    data_r = []
    labels = []  # Eğitim için gerçek etiketler (ana/alt)
    file_labels = []  # Tahmin modunda gerçek etiket bilgisini saklamak için

    for main_folder in os.listdir(data_dir):
        main_class_path = os.path.join(data_dir, main_folder)
        if not os.path.isdir(main_class_path):
            continue

        for path, _, _ in os.walk(main_class_path):
            if path == main_class_path:
                continue

            for file_name in os.listdir(path):
                if file_name.endswith("_i.csv"):  # Sadece _r.csv dosyalarını al
                    try:
                        file_path = os.path.join(path, file_name)
                        df_r = pd.read_csv(file_path, skiprows=28)
                        feat_r = df_r.iloc[:, 1].values.flatten()
                        data_r.append(feat_r)

                        true_label = os.path.join(
                            os.path.basename(os.path.dirname(path)),
                            os.path.basename(path)
                        )
                        if mode == 'train':
                            labels.append(true_label)
                        else:
                            file_labels.append(true_label)
                    except Exception as e:
                        print(f"Hata: {file_name} işlenirken hata oluştu: {e}. Atlanıyor.")

    if mode == 'train':
        return np.array(data_r), labels
    else:
        return np.array(data_r), file_labels

###############################################
# Tahmin Sonuçlarını Grup Bazında Raporlama
###############################################
def print_grouped_predictions_summary(predictions):
    import pandas as pd
    df = pd.DataFrame(predictions, columns=['Gerçek', 'Tahmin', 'Olasılık'])

    grouped_true = df.groupby('Gerçek')
    total_correct_predictions = 0
    total_wrong_predictions = 0

    for true_label, group in grouped_true:
        total = len(group)
        true_main = true_label.split('/')[0]

        # Doğru tahmin: tahmin edilen etiketin ana kısmı gerçek ana ile eşleşiyorsa
        correct_mask = group['Tahmin'].apply(lambda x: x.split('/')[0] == true_main)
        correct_group = group[correct_mask]
        correct_count = len(correct_group)
        accuracy = (correct_count / total) * 100 if total > 0 else 0

        print(f"Gerçek: {true_label}")
        print(f"  Doğru tahminler ({true_main}): {correct_count} dosya, Doğruluk: %{accuracy:.2f}")

        total_correct_predictions += correct_count
        total_wrong_predictions += (total - correct_count)

        wrong_group = group[~correct_mask]
        if not wrong_group.empty:
            # Yanlış tahminleri alt klasörleriyle birlikte grupla
            wrong_summary = wrong_group.groupby('Tahmin').agg(
                count=('Tahmin', 'count'),
                avg_prob=('Olasılık', 'mean')
            ).reset_index()
            wrong_summary = wrong_summary.sort_values(by='count', ascending=False).head(3)

            print("  Yanlış tahminler:")
            for _, row in wrong_summary.iterrows():
                print(f"    {row['Tahmin']}: {row['count']} dosya, Ortalama Olasılık: {row['avg_prob']:.4f}")
        print("")

    total_predictions = len(predictions)
    overall_accuracy = (total_correct_predictions / total_predictions) * 100 if total_predictions > 0 else 0
    print(
        f"Toplamda {total_predictions} prediction verisinden, {total_correct_predictions} doğru, {total_wrong_predictions} yanlış veri var. Doğruluk oranı: %{overall_accuracy:.2f}")

def print_class_based_accuracy(predictions):
    """
    Her sınıf için doğru ve yanlış tahmin sayısını ve doğruluğunu hesaplar ve yazdırır.
    """
    import pandas as pd
    df = pd.DataFrame(predictions, columns=['Gerçek', 'Tahmin', 'Olasılık'])

    all_classes = set(df['Gerçek'].unique())
    all_classes.update(df['Tahmin'].unique())

    for class_name in sorted(all_classes):

        class_df = df[df['Gerçek'] == class_name]
        if class_df.empty:
            continue

        total_samples = len(class_df)
        correct_predictions = len(class_df[class_df['Gerçek'] == class_df['Tahmin']])

        accuracy = (correct_predictions / total_samples) * 100 if total_samples > 0 else 0

        print(f"Sınıf: {class_name}")
        print(f"  Toplam örnek: {total_samples}")
        print(f"  Doğru tahmin: {correct_predictions}")
        print(f"  Yanlış tahmin: {total_samples - correct_predictions}")
        print(f"  Doğruluk: %{accuracy:.2f}")
        print("")

###############################################
# Ana Fonksiyon: Eğitim ve Tahmin (ExtraTreesClassifier)
###############################################
def main():
    ##############################
    # 1. Eğitim
    ##############################
    TRAIN_DIR = "/home/han/Documents/500_veri/Train"

    print("Eğitim verisi yükleniyor...")
    data_r, train_labels = load_data(TRAIN_DIR, mode='train')
    print(f"Eğitim verisi boyutu: {data_r.shape}\n")

    # Tüm veriyi %80 eğitim, %20 doğrulama olarak ayırma
    data_r_train, data_r_val, train_labels_train, train_labels_val = train_test_split(
        data_r, train_labels, test_size=0.2, random_state=42, stratify=train_labels
    )

    # SNV uygula (sadece eğitim verisinin eğitim kısmına)
    data_r_snv_train = np.array([snv(x.reshape(1, -1)).flatten() for x in data_r_train])

    # SNV uygula (doğrulama verisine)
    data_r_snv_val = np.array([snv(x.reshape(1, -1)).flatten() for x in data_r_val])

    # Etiket kodlama (ana/alt şeklinde)
    y_encoder = LabelEncoder()
    y_train = y_encoder.fit_transform(train_labels_train)
    y_val = y_encoder.transform(train_labels_val)
    joblib.dump(y_encoder, "label_encoder.pkl")

    # ExtraTreesClassifier modelini oluştur ve eğit
    print("ExtraTreesClassifier modeli eğitiliyor...\n")
    model = ExtraTreesClassifier(random_state=42)
    model.fit(data_r_snv_train, y_train)

    # Modeli kaydet
    joblib.dump(model, "best_extra_trees_model.pkl")
    print("\nModel başarıyla kaydedildi!\n")

    # Eğitim verileri üzerinde doğrulama
    y_pred_train = model.predict(data_r_snv_train)
    train_accuracy = accuracy_score(y_train, y_pred_train)
    print(f"Eğitim Verisi Doğruluğu: {train_accuracy * 100:.2f}%")
    print(classification_report(y_train, y_pred_train))

    # Doğrulama verileri üzerinde doğrulama
    y_pred_val = model.predict(data_r_snv_val)
    val_accuracy = accuracy_score(y_val, y_pred_val)
    print(f"Doğrulama Verisi Doğruluğu: {val_accuracy * 100:.2f}%")
    print(classification_report(y_val, y_pred_val))

    ##############################
    # 2. Tahmin
    ##############################
    SAMPLE_DIR = "/home/han/Documents/Prediction"
    print("Tahmin verileri yükleniyor...")
    try:
        # Sadece _r.csv yükle
        data_r_pred, true_labels = load_data(SAMPLE_DIR, mode='predict')

        # SNV uygula (tahmin verilerine)
        data_r_pred_snv = np.array([snv(x.reshape(1, -1)).flatten() for x in data_r_pred])

        # En iyi modeli yükle
        model = joblib.load("best_extra_trees_model.pkl")
        y_encoder = joblib.load("label_encoder.pkl")

        # Tahmin yap ve olasılıkları al
        y_pred = model.predict(data_r_pred_snv)
        y_prob = model.predict_proba(data_r_pred_snv)

        # Tahmin sonuçlarını gerçek etiketlerle eşleştir
        predictions = []
        for idx, pred_idx in enumerate(y_pred):
            pred_class = y_encoder.inverse_transform([pred_idx])[0]
            true_label = true_labels[idx]
            pred_prob = y_prob[idx, pred_idx]  # Tahmin edilen sınıfın olasılığı
            predictions.append((true_label, pred_class, pred_prob))

        print_grouped_predictions_summary(predictions)
        print("\n")
        print_class_based_accuracy(predictions)
        print("Tahmin işlemi başarıyla tamamlandı!")

    except Exception as e:
        print(f"Hata oluştu: {str(e)}")

if __name__ == "__main__":
    main()

